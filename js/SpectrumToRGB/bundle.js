var SpectrumToRGB =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
/**
 * Composite data type for an CIE XYZ chromaticity
 */
var XYZ = (function () {
    function XYZ(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    return XYZ;
}());
exports["default"] = XYZ;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
/**
 * Class to represent a reflectance spectrum
 */
var Spectrum = (function () {
    /**
     * @constructor
     * @param {number[][]} data  the input spectral data
     * @param {Boolean} isReflectance  is the data reflectance or absorbance
     */
    function Spectrum(data, isReflectance) {
        if (isReflectance === void 0) { isReflectance = true; }
        this.data = this.normalize(data);
        //if the data is not reflectance, i.e. absorbance
        //flip the data
        if (!isReflectance)
            this.toggleAbsorbReflect();
    }
    /**
     * Scales the spectrum so that the
     * max reflectance/absorbance = 1
     *
     * @param  {number[][]} data  the input spectral data
     * @return {number[][]} the normalized spectral data
     */
    Spectrum.prototype.normalize = function (data) {
        var max = this.findMax(data);
        for (var i = 0; i < data.length; i++) {
            data[i][1] /= max;
        }
        return data;
    };
    /**
     * Toggles the spectrum between absorbance and reflectance
     * assumes that there is no emissive portion
     * Reflectance = 1 - Absorbance
     */
    Spectrum.prototype.toggleAbsorbReflect = function () {
        for (var i = 0; i < this.data.length; i++) {
            this.data[i][1] = 1 - this.data[i][1];
        }
    };
    /**
     * Returns the max absorbance/reflectance value
     *
     * @param  {number[][]} data  the spectral data to find the max for
     * @return {number} the max value
     */
    Spectrum.prototype.findMax = function (data) {
        var max = 0;
        for (var i = 0; i < data.length; i++) {
            if (data[i][1] > max)
                max = data[i][1];
        }
        return max;
    };
    /**
     * Tests if a portion of the spectrum is within
     * the visible spectrum
     *
     * @return {boolean} is this spectrum visible
     */
    Spectrum.prototype.isVisible = function () {
        for (var i = 0; i < this.data.length; i++) {
            if (this.data[i][0] >= 380 && this.data[i][0] <= 780 && this.data[i][1] > 0)
                return true;
        }
        return false;
    };
    return Spectrum;
}());
exports["default"] = Spectrum;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var ColorSystem_1 = __webpack_require__(4);
var RGB_1 = __webpack_require__(7);
var XYZ_1 = __webpack_require__(0);
var CIEColorMatchingFunction_1 = __webpack_require__(3);
var d65 = __webpack_require__(6);
/**
 * Class to convert a spectrum to an rgb
 */
var SpectrumToRGB = (function () {
    function SpectrumToRGB() {
        //The class for a "function"(algorithm not jargon function)
        //to calculate a the additive portion a wavelength
        //contributes to an XYZ color
        this.matchingFunction = new CIEColorMatchingFunction_1["default"]();
        //White point chromaticities
        this.IlluminantCx = 0.3101; //For NTSC television
        this.IlluminantCy = 0.3162;
        this.IlluminantD65x = 0.3127; //For EBU and SMPTE
        this.IlluminantD65y = 0.3291;
        this.IlluminantEx = 0.33333333; //CIE equal-energy illuminant
        this.IlluminantEy = 0.33333333;
        //The illuminant spectrum
        this.illuminantSpectrum = d65["default"];
        //Gamma correction system
        //TODO move this to either an enum or
        //     a class with the gamma correction function
        this.GAMMA_REC709 = 0; //Rec. 709
        //Color Systems
        this.NTSCsystem = new ColorSystem_1["default"]("NTSC", 0.67, 0.33, 0.21, 0.71, 0.14, 0.08, this.IlluminantCx, this.IlluminantCy, this.GAMMA_REC709);
        this.EBUsystem = new ColorSystem_1["default"]("EBU (PAL/SECAM)", 0.64, 0.33, 0.29, 0.60, 0.15, 0.06, this.IlluminantD65x, this.IlluminantD65y, this.GAMMA_REC709);
        this.SMPTEsystem = new ColorSystem_1["default"]("SMPTE", 0.630, 0.340, 0.310, 0.595, 0.155, 0.070, this.IlluminantD65x, this.IlluminantD65y, this.GAMMA_REC709);
        this.HDTVsystem = new ColorSystem_1["default"]("HDTV", 0.670, 0.330, 0.210, 0.710, 0.150, 0.060, this.IlluminantD65x, this.IlluminantD65y, this.GAMMA_REC709);
        this.CIEsystem = new ColorSystem_1["default"]("CIE", 0.7355, 0.2645, 0.2658, 0.7243, 0.1669, 0.0085, this.IlluminantEx, this.IlluminantEy, this.GAMMA_REC709);
        this.Rec709system = new ColorSystem_1["default"]("CIE REC 709", 0.64, 0.33, 0.30, 0.60, 0.15, 0.06, this.IlluminantD65x, this.IlluminantD65y, this.GAMMA_REC709);
    }
    /**
     * Takes an xyz color and returns the rgb color in the input color system
     *
     * @param  {ColorSystem} cs  The color system to render the rgb color in
     * @param  {XYZ} xyz  The xyz chromaticity to convert from
     * @return {RGB} The converted rgb color
     */
    SpectrumToRGB.prototype.xyzToRGB = function (cs, xyz) {
        var xr, yr, zr, xg, yg, zg, xb, yb, zb;
        var xw, yw, zw;
        var rx, ry, rz, gx, gy, gz, bx, by, bz;
        var rw, gw, bw;
        var r, g, b;
        //x + y + z = 1, therefore z = 1 - (x + y)
        xr = cs.xRed;
        yr = cs.yRed;
        zr = 1. - (xr + yr);
        xg = cs.xGreen;
        yg = cs.yGreen;
        zg = 1. - (xg + yg);
        xb = cs.xBlue;
        yb = cs.yBlue;
        zb = 1. - (xb + yb);
        xw = cs.xWhite;
        yw = cs.yWhite;
        zw = 1. - (xw + yw);
        //xyz -> rgb matrix, before scaling to white.
        rx = (yg * zb) - (yb * zg);
        ry = (xb * zg) - (xg * zb);
        rz = (xg * yb) - (xb * yg);
        gx = (yb * zr) - (yr * zb);
        gy = (xr * zb) - (xb * zr);
        gz = (xb * yr) - (xr * yb);
        bx = (yr * zg) - (yg * zr);
        by = (xg * zr) - (xr * zg);
        bz = (xr * yg) - (xg * yr);
        //White scaling factors.
        //Dividing by yw scales the white luminance to unity, as conventional.
        rw = ((rx * xw) + (ry * yw) + (rz * zw)) / yw;
        gw = ((gx * xw) + (gy * yw) + (gz * zw)) / yw;
        bw = ((bx * xw) + (by * yw) + (bz * zw)) / yw;
        //xyz -> rgb matrix, correctly scaled to white.
        rx = rx / rw;
        ry = ry / rw;
        rz = rz / rw;
        gx = gx / gw;
        gy = gy / gw;
        gz = gz / gw;
        bx = bx / bw;
        by = by / bw;
        bz = bz / bw;
        //rgb of the desired point
        r = (rx * xyz.x) + (ry * xyz.y) + (rz * xyz.z);
        g = (gx * xyz.x) + (gy * xyz.y) + (gz * xyz.z);
        b = (bx * xyz.x) + (by * xyz.y) + (bz * xyz.z);
        return this.constrainRGBTruncate(new RGB_1["default"](r, g, b));
    };
    /**
     * Tests if the rgb color is inside the gamut achieveable
     * where all component colors are positive
     *
     * @param  {RGB} rgb  the rgb color to test
     * @return {boolean} is the color inside the color gamut
     */
    SpectrumToRGB.prototype.insideGamut = function (rgb) {
        return (rgb.r >= 0) && (rgb.g >= 0) && (rgb.b >= 0);
    };
    /**
     * Adds white to a color until it is inside the gamut
     *
     * @param  {RGB} rgb  the rgb color to constrain; used as an inout parameter
     * @return {RGB} The color constrained inside the gamut
     */
    SpectrumToRGB.prototype.constrainRGBAddWhite = function (rgb) {
        var w;
        var red = rgb.r;
        var green = rgb.g;
        var blue = rgb.b;
        //Amount of white needed is w = - min(0, red, green, blue)
        w = (0 < red) ? 0 : red;
        w = (w < green) ? w : green;
        w = (w < blue) ? w : blue;
        w = -w;
        //Add just enough white to make red, green, blue all positive.
        if (w > 0) {
            red += w;
            green += w;
            blue += w;
        }
        return new RGB_1["default"](red, green, blue);
    };
    /**
    * Scales the rgb to max component=1 when a component is > 1 and zeros negative components
    *
    * @param  {RGB} rgb  the rgb color to constrain; used as an inout parameter
    * @return {RGB} The color constrained inside the gamut
    */
    SpectrumToRGB.prototype.constrainRGBTruncate = function (rgb) {
        var red = rgb.r;
        var green = rgb.g;
        var blue = rgb.b;
        //Find max color
        var max = (red > green) ? red : green;
        max = (max > blue) ? max : blue;
        if (max > 1) {
            red /= max;
            green /= max;
            blue /= max;
        }
        red = (red < 0) ? 0 : red;
        green = (green < 0) ? 0 : green;
        blue = (blue < 0) ? 0 : blue;
        return new RGB_1["default"](red, green, blue);
    };
    /**
     * Gamma corrects a single component color for a given color system
     *
     * @param {ColorSystem} cs  The color system to gamma correct for
     * @param {number} c  the value of a component color to correct for
     * @return {number} the gamma corrected value
     */
    SpectrumToRGB.prototype.gammaCorrect = function (cs, c) {
        var gamma;
        gamma = cs.gamma;
        if (gamma === this.GAMMA_REC709) {
            //Rec. 709 gamma correction.
            var cc = 0.018;
            if (c < cc) {
                c *= ((1.099 * Math.pow(cc, 0.45)) - 0.099) / cc;
            }
            else {
                c = (1.099 * Math.pow(c, 0.45)) - 0.099;
            }
        }
        else {
            //Nonlinear colour = (Linear colour)^(1/gamma)
            c = Math.pow(c, 1.0 / gamma);
        }
        return c;
    };
    /**
     * Gamma corrects an rgb color for a given color system
     *
     * @param {ColorSystem} cs  The color system to gamma correct for
     * @param {RGB} rgb  the rgb color to gamma correct
     * @return {RGB} the gamma corrected rgb
     */
    SpectrumToRGB.prototype.gammaCorrectRGB = function (cs, rgb) {
        return new RGB_1["default"](this.gammaCorrect(cs, rgb.r), this.gammaCorrect(cs, rgb.g), this.gammaCorrect(cs, rgb.b));
    };
    /**
     * Scales a color so the max component color has a value of 1
     *
     * @param {RGB} rgb  the color to be normalized
     * @return {RGB} the gamma corrected rgb
     */
    SpectrumToRGB.prototype.normRGB = function (rgb) {
        var red = rgb.r;
        var green = rgb.g;
        var blue = rgb.b;
        //Find max color
        var max = (red > green) ? red : green;
        max = (max > blue) ? max : blue;
        if (max > 0) {
            red /= max;
            green /= max;
            blue /= max;
        }
        return new RGB_1["default"](red, green, blue);
    };
    /**
     * Converts an input spectrum into a CIE XYZ color
     *
     * @param  {Spectrum} spectrum  The spectrum to convert from
     * @return {XYZ} the xyz color representing the spectrum
     */
    SpectrumToRGB.prototype.spectrumToXYZ = function (spectrum) {
        var xBar = 0;
        var yBar = 0;
        var zBar = 0;
        var xyzSum;
        var reflected;
        var colorMatch;
        for (var i = 0; i < spectrum.data.length; i++) {
            //Skip values outside the visibile range 380-780
            //that do not contribute to a color
            if (spectrum.data[i][0] >= 380 && spectrum.data[i][0] <= 780) {
                colorMatch = this.matchingFunction.match(spectrum.data[i][0]);
                reflected = spectrum.data[i][1] * this.illuminantSpectrum[(spectrum.data[i][0] - 380)];
                xBar += reflected * colorMatch.x;
                yBar += reflected * colorMatch.y;
                zBar += reflected * colorMatch.z;
            }
        }
        xBar /= yBar;
        zBar /= yBar;
        yBar /= yBar;
        xyzSum = (xBar + yBar + zBar);
        var x = xBar / xyzSum;
        var y = yBar / xyzSum;
        var z = zBar / xyzSum;
        return new XYZ_1["default"](x, y, z);
    };
    /**
     * Entry point for class. Converts a spectrum to an rgb color
     *
     * @param  {Spectrum} spectrum the input spectrum to be converted
     * @return {RGB} the rgb color the spectrum represents
     */
    SpectrumToRGB.prototype.convert = function (spectrum) {
        var cs = this.SMPTEsystem;
        var xyz = this.spectrumToXYZ(spectrum);
        return this.xyzToRGB(cs, xyz);
    };
    return SpectrumToRGB;
}());
exports["default"] = SpectrumToRGB;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var XYZ_1 = __webpack_require__(0);
var cie1964 = __webpack_require__(5);
/**
 * Class to match a wavelength to a CIE xyz color
 */
var CIEColorMatchingFunction = (function () {
    function CIEColorMatchingFunction() {
        //[[x-coordinate, y-coordinate, z-coordinate],...]
        this.matchingFunction = cie1964["default"];
    }
    //TODO constructor to set what matching function to use
    /**
     * Matches a given wavelength to an xyz color
     *
     * @param  {number} wavelength  the wavelength to get the color for
     * @return {XYZ} the xyz color represented by the wavelength
     */
    CIEColorMatchingFunction.prototype.match = function (wavelength) {
        var index = Math.round(wavelength - 380);
        var temp = this.matchingFunction[index];
        return new XYZ_1["default"](temp[0], temp[1], temp[2]);
    };
    return CIEColorMatchingFunction;
}());
exports["default"] = CIEColorMatchingFunction;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
/**
 * Composite data type for a color system
 */
var ColorSystem = (function () {
    function ColorSystem(name, xRed, yRed, xGreen, yGreen, xBlue, yBlue, xWhite, yWhite, gamma) {
        this.name = name;
        this.xRed = xRed;
        this.yRed = yRed;
        this.xGreen = xGreen;
        this.yGreen = yGreen;
        this.xBlue = xBlue;
        this.yBlue = yBlue;
        this.xWhite = xWhite;
        this.yWhite = yWhite;
        this.gamma = gamma;
    }
    return ColorSystem;
}());
exports["default"] = ColorSystem;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var matchingFunction = [
    [0.000159952, 0.000017364, 0.000704776],
    [0.000215080, 0.000023327, 0.000948230],
    [0.000287490, 0.000031150, 0.001268200],
    [0.000381990, 0.000041350, 0.001686100],
    [0.000504550, 0.000054560, 0.002228500],
    [0.000662440, 0.000071560, 0.002927800],
    [0.000864500, 0.000093300, 0.003823700],
    [0.001121500, 0.000120870, 0.004964200],
    [0.001446160, 0.000155640, 0.006406700],
    [0.001853590, 0.000199200, 0.008219300],
    [0.002361600, 0.000253400, 0.010482200],
    [0.002990600, 0.000320200, 0.013289000],
    [0.003764500, 0.000402400, 0.016747000],
    [0.004710200, 0.000502300, 0.020980000],
    [0.005858100, 0.000623200, 0.026127000],
    [0.007242300, 0.000768500, 0.032344000],
    [0.008899600, 0.000941700, 0.039802000],
    [0.010870900, 0.001147800, 0.048691000],
    [0.013198900, 0.001390300, 0.059210000],
    [0.015929200, 0.001674000, 0.071576000],
    [0.019109700, 0.002004400, 0.086010900],
    [0.022788000, 0.002386000, 0.102740000],
    [0.027011000, 0.002822000, 0.122000000],
    [0.031829000, 0.003319000, 0.144020000],
    [0.037278000, 0.003880000, 0.168990000],
    [0.043400000, 0.004509000, 0.197120000],
    [0.050223000, 0.005209000, 0.228570000],
    [0.057764000, 0.005985000, 0.263470000],
    [0.066038000, 0.006833000, 0.301900000],
    [0.075033000, 0.007757000, 0.343870000],
    [0.084736000, 0.008756000, 0.389366000],
    [0.095041000, 0.009816000, 0.437970000],
    [0.105836000, 0.010918000, 0.489220000],
    [0.117066000, 0.012058000, 0.542900000],
    [0.128682000, 0.013237000, 0.598810000],
    [0.140638000, 0.014456000, 0.656760000],
    [0.152893000, 0.015717000, 0.716580000],
    [0.165416000, 0.017025000, 0.778120000],
    [0.178191000, 0.018399000, 0.841310000],
    [0.191214000, 0.019848000, 0.906110000],
    [0.204492000, 0.021391000, 0.972542000],
    [0.217650000, 0.022992000, 1.038900000],
    [0.230267000, 0.024598000, 1.103100000],
    [0.242311000, 0.026213000, 1.165100000],
    [0.253793000, 0.027841000, 1.224900000],
    [0.264737000, 0.029497000, 1.282500000],
    [0.275195000, 0.031195000, 1.338200000],
    [0.285301000, 0.032927000, 1.392600000],
    [0.295143000, 0.034738000, 1.446100000],
    [0.304869000, 0.036654000, 1.499400000],
    [0.314679000, 0.038676000, 1.553480000],
    [0.324355000, 0.040792000, 1.607200000],
    [0.333570000, 0.042946000, 1.658900000],
    [0.342243000, 0.045114000, 1.708200000],
    [0.350312000, 0.047333000, 1.754800000],
    [0.357719000, 0.049602000, 1.798500000],
    [0.364482000, 0.051934000, 1.839200000],
    [0.370493000, 0.054337000, 1.876600000],
    [0.375727000, 0.056822000, 1.910500000],
    [0.380158000, 0.059399000, 1.940800000],
    [0.383734000, 0.062077000, 1.967280000],
    [0.386327000, 0.064737000, 1.989100000],
    [0.387858000, 0.067285000, 2.005700000],
    [0.388396000, 0.069764000, 2.017400000],
    [0.387978000, 0.072218000, 2.024400000],
    [0.386726000, 0.074704000, 2.027300000],
    [0.384696000, 0.077272000, 2.026400000],
    [0.382006000, 0.079979000, 2.022300000],
    [0.378709000, 0.082874000, 2.015300000],
    [0.374915000, 0.086000000, 2.006000000],
    [0.370702000, 0.089456000, 1.994800000],
    [0.366089000, 0.092947000, 1.981400000],
    [0.361045000, 0.096275000, 1.965300000],
    [0.355518000, 0.099535000, 1.946400000],
    [0.349486000, 0.102829000, 1.924800000],
    [0.342957000, 0.106256000, 1.900700000],
    [0.335893000, 0.109901000, 1.874100000],
    [0.328284000, 0.113835000, 1.845100000],
    [0.320150000, 0.118167000, 1.813900000],
    [0.311475000, 0.122932000, 1.780600000],
    [0.302273000, 0.128201000, 1.745370000],
    [0.292858000, 0.133457000, 1.709100000],
    [0.283502000, 0.138323000, 1.672300000],
    [0.274044000, 0.143042000, 1.634700000],
    [0.264263000, 0.147787000, 1.595600000],
    [0.254085000, 0.152761000, 1.554900000],
    [0.243392000, 0.158102000, 1.512200000],
    [0.232187000, 0.163941000, 1.467300000],
    [0.220488000, 0.170362000, 1.419900000],
    [0.208198000, 0.177425000, 1.370000000],
    [0.195618000, 0.185190000, 1.317560000],
    [0.183034000, 0.193025000, 1.262400000],
    [0.170222000, 0.200313000, 1.205000000],
    [0.157348000, 0.207156000, 1.146600000],
    [0.144650000, 0.213644000, 1.088000000],
    [0.132349000, 0.219940000, 1.030200000],
    [0.120584000, 0.226170000, 0.973830000],
    [0.109456000, 0.232467000, 0.919430000],
    [0.099042000, 0.239025000, 0.867460000],
    [0.089388000, 0.245997000, 0.818280000],
    [0.080507000, 0.253589000, 0.772125000],
    [0.072034000, 0.261876000, 0.728290000],
    [0.063710000, 0.270643000, 0.686040000],
    [0.055694000, 0.279645000, 0.645530000],
    [0.048117000, 0.288694000, 0.606850000],
    [0.041072000, 0.297665000, 0.570060000],
    [0.034642000, 0.306469000, 0.535220000],
    [0.028896000, 0.315035000, 0.502340000],
    [0.023876000, 0.323335000, 0.471400000],
    [0.019628000, 0.331366000, 0.442390000],
    [0.016172000, 0.339133000, 0.415254000],
    [0.013300000, 0.347860000, 0.390024000],
    [0.010759000, 0.358326000, 0.366399000],
    [0.008542000, 0.370001000, 0.344015000],
    [0.006661000, 0.382464000, 0.322689000],
    [0.005132000, 0.395379000, 0.302356000],
    [0.003982000, 0.408482000, 0.283036000],
    [0.003239000, 0.421588000, 0.264816000],
    [0.002934000, 0.434619000, 0.247848000],
    [0.003114000, 0.447601000, 0.232318000],
    [0.003816000, 0.460777000, 0.218502000],
    [0.005095000, 0.474340000, 0.205851000],
    [0.006936000, 0.488200000, 0.193596000],
    [0.009299000, 0.502340000, 0.181736000],
    [0.012147000, 0.516740000, 0.170281000],
    [0.015444000, 0.531360000, 0.159249000],
    [0.019156000, 0.546190000, 0.148673000],
    [0.023250000, 0.561180000, 0.138609000],
    [0.027690000, 0.576290000, 0.129096000],
    [0.032444000, 0.591500000, 0.120215000],
    [0.037465000, 0.606741000, 0.112044000],
    [0.042956000, 0.622150000, 0.104710000],
    [0.049114000, 0.637830000, 0.098196000],
    [0.055920000, 0.653710000, 0.092361000],
    [0.063349000, 0.669680000, 0.087088000],
    [0.071358000, 0.685660000, 0.082248000],
    [0.079901000, 0.701550000, 0.077744000],
    [0.088909000, 0.717230000, 0.073456000],
    [0.098293000, 0.732570000, 0.069268000],
    [0.107949000, 0.747460000, 0.065060000],
    [0.117749000, 0.761757000, 0.060709000],
    [0.127839000, 0.775340000, 0.056457000],
    [0.138450000, 0.788220000, 0.052609000],
    [0.149516000, 0.800460000, 0.049122000],
    [0.161041000, 0.812140000, 0.045954000],
    [0.172953000, 0.823330000, 0.043050000],
    [0.185209000, 0.834120000, 0.040368000],
    [0.197755000, 0.844600000, 0.037839000],
    [0.210538000, 0.854870000, 0.035384000],
    [0.223460000, 0.865040000, 0.032949000],
    [0.236491000, 0.875211000, 0.030451000],
    [0.249633000, 0.885370000, 0.028029000],
    [0.262972000, 0.895370000, 0.025862000],
    [0.276515000, 0.905150000, 0.023920000],
    [0.290269000, 0.914650000, 0.022174000],
    [0.304213000, 0.923810000, 0.020584000],
    [0.318361000, 0.932550000, 0.019127000],
    [0.332705000, 0.940810000, 0.017740000],
    [0.347232000, 0.948520000, 0.016403000],
    [0.361926000, 0.955600000, 0.015064000],
    [0.376772000, 0.961988000, 0.013676000],
    [0.391683000, 0.967540000, 0.012308000],
    [0.406594000, 0.972230000, 0.011056000],
    [0.421539000, 0.976170000, 0.009915000],
    [0.436517000, 0.979460000, 0.008872000],
    [0.451584000, 0.982200000, 0.007918000],
    [0.466782000, 0.984520000, 0.007030000],
    [0.482147000, 0.986520000, 0.006223000],
    [0.497738000, 0.988320000, 0.005453000],
    [0.513606000, 0.990020000, 0.004714000],
    [0.529826000, 0.991761000, 0.003988000],
    [0.546440000, 0.993530000, 0.003289000],
    [0.563426000, 0.995230000, 0.002646000],
    [0.580726000, 0.996770000, 0.002063000],
    [0.598290000, 0.998090000, 0.001533000],
    [0.616053000, 0.999110000, 0.001091000],
    [0.633948000, 0.999770000, 0.000711000],
    [0.651901000, 1.000000000, 0.000407000],
    [0.669824000, 0.999710000, 0.000184000],
    [0.687632000, 0.998850000, 0.000047000],
    [0.705224000, 0.997340000, 0.000000000],
    [0.722773000, 0.995260000, 0.000000000],
    [0.740483000, 0.992740000, 0.000000000],
    [0.758273000, 0.989750000, 0.000000000],
    [0.776083000, 0.986300000, 0.000000000],
    [0.793832000, 0.982380000, 0.000000000],
    [0.811436000, 0.977980000, 0.000000000],
    [0.828822000, 0.973110000, 0.000000000],
    [0.845879000, 0.967740000, 0.000000000],
    [0.862525000, 0.961890000, 0.000000000],
    [0.878655000, 0.955552000, 0.000000000],
    [0.894208000, 0.948601000, 0.000000000],
    [0.909206000, 0.940981000, 0.000000000],
    [0.923672000, 0.932798000, 0.000000000],
    [0.937638000, 0.924158000, 0.000000000],
    [0.951162000, 0.915175000, 0.000000000],
    [0.964283000, 0.905954000, 0.000000000],
    [0.977068000, 0.896608000, 0.000000000],
    [0.989590000, 0.887249000, 0.000000000],
    [1.001910000, 0.877986000, 0.000000000],
    [1.014160000, 0.868934000, 0.000000000],
    [1.026500000, 0.860164000, 0.000000000],
    [1.038800000, 0.851519000, 0.000000000],
    [1.051000000, 0.842963000, 0.000000000],
    [1.062900000, 0.834393000, 0.000000000],
    [1.074300000, 0.825623000, 0.000000000],
    [1.085200000, 0.816764000, 0.000000000],
    [1.095200000, 0.807544000, 0.000000000],
    [1.104200000, 0.797947000, 0.000000000],
    [1.112000000, 0.787893000, 0.000000000],
    [1.118520000, 0.777405000, 0.000000000],
    [1.123800000, 0.766490000, 0.000000000],
    [1.128000000, 0.755309000, 0.000000000],
    [1.131100000, 0.743845000, 0.000000000],
    [1.133200000, 0.732190000, 0.000000000],
    [1.134300000, 0.720353000, 0.000000000],
    [1.134300000, 0.708281000, 0.000000000],
    [1.133300000, 0.696055000, 0.000000000],
    [1.131200000, 0.683621000, 0.000000000],
    [1.128100000, 0.671048000, 0.000000000],
    [1.123990000, 0.658341000, 0.000000000],
    [1.118900000, 0.645545000, 0.000000000],
    [1.112900000, 0.632718000, 0.000000000],
    [1.105900000, 0.619815000, 0.000000000],
    [1.098000000, 0.606887000, 0.000000000],
    [1.089100000, 0.593878000, 0.000000000],
    [1.079200000, 0.580781000, 0.000000000],
    [1.068400000, 0.567653000, 0.000000000],
    [1.056700000, 0.554490000, 0.000000000],
    [1.044000000, 0.541228000, 0.000000000],
    [1.030480000, 0.527963000, 0.000000000],
    [1.016000000, 0.514634000, 0.000000000],
    [1.000800000, 0.501363000, 0.000000000],
    [0.984790000, 0.488124000, 0.000000000],
    [0.968080000, 0.474935000, 0.000000000],
    [0.950740000, 0.461834000, 0.000000000],
    [0.932800000, 0.448823000, 0.000000000],
    [0.914340000, 0.435917000, 0.000000000],
    [0.895390000, 0.423153000, 0.000000000],
    [0.876030000, 0.410526000, 0.000000000],
    [0.856297000, 0.398057000, 0.000000000],
    [0.836350000, 0.385835000, 0.000000000],
    [0.816290000, 0.373951000, 0.000000000],
    [0.796050000, 0.362311000, 0.000000000],
    [0.775610000, 0.350863000, 0.000000000],
    [0.754930000, 0.339554000, 0.000000000],
    [0.733990000, 0.328309000, 0.000000000],
    [0.712780000, 0.317118000, 0.000000000],
    [0.691290000, 0.305936000, 0.000000000],
    [0.669520000, 0.294737000, 0.000000000],
    [0.647467000, 0.283493000, 0.000000000],
    [0.625110000, 0.272222000, 0.000000000],
    [0.602520000, 0.260990000, 0.000000000],
    [0.579890000, 0.249877000, 0.000000000],
    [0.557370000, 0.238946000, 0.000000000],
    [0.535110000, 0.228254000, 0.000000000],
    [0.513240000, 0.217853000, 0.000000000],
    [0.491860000, 0.207780000, 0.000000000],
    [0.471080000, 0.198072000, 0.000000000],
    [0.450960000, 0.188748000, 0.000000000],
    [0.431567000, 0.179828000, 0.000000000],
    [0.412870000, 0.171285000, 0.000000000],
    [0.394750000, 0.163059000, 0.000000000],
    [0.377210000, 0.155151000, 0.000000000],
    [0.360190000, 0.147535000, 0.000000000],
    [0.343690000, 0.140211000, 0.000000000],
    [0.327690000, 0.133170000, 0.000000000],
    [0.312170000, 0.126400000, 0.000000000],
    [0.297110000, 0.119892000, 0.000000000],
    [0.282500000, 0.113640000, 0.000000000],
    [0.268329000, 0.107633000, 0.000000000],
    [0.254590000, 0.101870000, 0.000000000],
    [0.241300000, 0.096347000, 0.000000000],
    [0.228480000, 0.091063000, 0.000000000],
    [0.216140000, 0.086010000, 0.000000000],
    [0.204300000, 0.081187000, 0.000000000],
    [0.192950000, 0.076583000, 0.000000000],
    [0.182110000, 0.072198000, 0.000000000],
    [0.171770000, 0.068024000, 0.000000000],
    [0.161920000, 0.064052000, 0.000000000],
    [0.152568000, 0.060281000, 0.000000000],
    [0.143670000, 0.056697000, 0.000000000],
    [0.135200000, 0.053292000, 0.000000000],
    [0.127130000, 0.050059000, 0.000000000],
    [0.119480000, 0.046998000, 0.000000000],
    [0.112210000, 0.044096000, 0.000000000],
    [0.105310000, 0.041345000, 0.000000000],
    [0.098786000, 0.038750700, 0.000000000],
    [0.092610000, 0.036297800, 0.000000000],
    [0.086773000, 0.033983200, 0.000000000],
    [0.081260600, 0.031800400, 0.000000000],
    [0.076048000, 0.029739500, 0.000000000],
    [0.071114000, 0.027791800, 0.000000000],
    [0.066454000, 0.025955100, 0.000000000],
    [0.062062000, 0.024226300, 0.000000000],
    [0.057930000, 0.022601700, 0.000000000],
    [0.054050000, 0.021077900, 0.000000000],
    [0.050412000, 0.019650500, 0.000000000],
    [0.047006000, 0.018315300, 0.000000000],
    [0.043823000, 0.017068600, 0.000000000],
    [0.040850800, 0.015905100, 0.000000000],
    [0.038072000, 0.014818300, 0.000000000],
    [0.035468000, 0.013800800, 0.000000000],
    [0.033031000, 0.012849500, 0.000000000],
    [0.030753000, 0.011960700, 0.000000000],
    [0.028623000, 0.011130300, 0.000000000],
    [0.026635000, 0.010355500, 0.000000000],
    [0.024781000, 0.009633200, 0.000000000],
    [0.023052000, 0.008959900, 0.000000000],
    [0.021441000, 0.008332400, 0.000000000],
    [0.019941300, 0.007748800, 0.000000000],
    [0.018544000, 0.007204600, 0.000000000],
    [0.017241000, 0.006697500, 0.000000000],
    [0.016027000, 0.006225100, 0.000000000],
    [0.014896000, 0.005785000, 0.000000000],
    [0.013842000, 0.005375100, 0.000000000],
    [0.012862000, 0.004994100, 0.000000000],
    [0.011949000, 0.004639200, 0.000000000],
    [0.011100000, 0.004309300, 0.000000000],
    [0.010311000, 0.004002800, 0.000000000],
    [0.009576880, 0.003717740, 0.000000000],
    [0.008894000, 0.003452620, 0.000000000],
    [0.008258100, 0.003205830, 0.000000000],
    [0.007666400, 0.002976230, 0.000000000],
    [0.007116300, 0.002762810, 0.000000000],
    [0.006605200, 0.002564560, 0.000000000],
    [0.006130600, 0.002380480, 0.000000000],
    [0.005690300, 0.002209710, 0.000000000],
    [0.005281900, 0.002051320, 0.000000000],
    [0.004903300, 0.001904490, 0.000000000],
    [0.004552630, 0.001768470, 0.000000000],
    [0.004227500, 0.001642360, 0.000000000],
    [0.003925800, 0.001525350, 0.000000000],
    [0.003645700, 0.001416720, 0.000000000],
    [0.003385900, 0.001315950, 0.000000000],
    [0.003144700, 0.001222390, 0.000000000],
    [0.002920800, 0.001135550, 0.000000000],
    [0.002713000, 0.001054940, 0.000000000],
    [0.002520200, 0.000980140, 0.000000000],
    [0.002341100, 0.000910660, 0.000000000],
    [0.002174960, 0.000846190, 0.000000000],
    [0.002020600, 0.000786290, 0.000000000],
    [0.001877300, 0.000730680, 0.000000000],
    [0.001744100, 0.000678990, 0.000000000],
    [0.001620500, 0.000631010, 0.000000000],
    [0.001505700, 0.000586440, 0.000000000],
    [0.001399200, 0.000545110, 0.000000000],
    [0.001300400, 0.000506720, 0.000000000],
    [0.001208700, 0.000471110, 0.000000000],
    [0.001123600, 0.000438050, 0.000000000],
    [0.001044760, 0.000407410, 0.000000000],
    [0.000971560, 0.000378962, 0.000000000],
    [0.000903600, 0.000352543, 0.000000000],
    [0.000840480, 0.000328001, 0.000000000],
    [0.000781870, 0.000305208, 0.000000000],
    [0.000727450, 0.000284041, 0.000000000],
    [0.000676900, 0.000264375, 0.000000000],
    [0.000629960, 0.000246109, 0.000000000],
    [0.000586370, 0.000229143, 0.000000000],
    [0.000545870, 0.000213376, 0.000000000],
    [0.000508258, 0.000198730, 0.000000000],
    [0.000473300, 0.000185115, 0.000000000],
    [0.000440800, 0.000172454, 0.000000000],
    [0.000410580, 0.000160678, 0.000000000],
    [0.000382490, 0.000149730, 0.000000000],
    [0.000356380, 0.000139550, 0.000000000],
    [0.000332110, 0.000130086, 0.000000000],
    [0.000309550, 0.000121290, 0.000000000],
    [0.000288580, 0.000113106, 0.000000000],
    [0.000269090, 0.000105501, 0.000000000],
    [0.000250969, 0.000098428, 0.000000000],
    [0.000234130, 0.000091853, 0.000000000],
    [0.000218470, 0.000085738, 0.000000000],
    [0.000203910, 0.000080048, 0.000000000],
    [0.000190350, 0.000074751, 0.000000000],
    [0.000177730, 0.000069819, 0.000000000],
    [0.000165970, 0.000065222, 0.000000000],
    [0.000155020, 0.000060939, 0.000000000],
    [0.000144800, 0.000056942, 0.000000000],
    [0.000135280, 0.000053217, 0.000000000],
    [0.000126390, 0.000049737, 0.000000000],
    [0.000118100, 0.000046491, 0.000000000],
    [0.000110370, 0.000043464, 0.000000000],
    [0.000103150, 0.000040635, 0.000000000],
    [0.000096427, 0.000038000, 0.000000000],
    [0.000090151, 0.000035541, 0.000000000],
    [0.000084294, 0.000033245, 0.000000000],
    [0.000078830, 0.000031101, 0.000000000],
    [0.000073729, 0.000029099, 0.000000000],
    [0.000068969, 0.000027231, 0.000000000],
    [0.000064526, 0.000025486, 0.000000000],
    [0.000060376, 0.000023856, 0.000000000],
    [0.000056500, 0.000022333, 0.000000000],
    [0.000052880, 0.000020910, 0.000000000],
    [0.000049498, 0.000019581, 0.000000000],
    [0.000046339, 0.000018338, 0.000000000],
    [0.000043389, 0.000017178, 0.000000000],
    [0.000040634, 0.000016093, 0.000000000],
    [0.000038060, 0.000015080, 0.000000000],
    [0.000035657, 0.000014134, 0.000000000],
    [0.000033412, 0.000013249, 0.000000000],
];
exports["default"] = matchingFunction;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var spectrum = [
    49.9755,
    50.4428,
    50.91,
    51.3773,
    51.8446,
    52.3118,
    52.7791,
    53.2464,
    53.7137,
    54.1809,
    54.6482,
    57.4589,
    60.2695,
    63.0802,
    65.8909,
    68.7015,
    71.5122,
    74.3229,
    77.1336,
    79.9442,
    82.7549,
    83.628,
    84.5011,
    85.3742,
    86.2473,
    87.1204,
    87.9936,
    88.8667,
    89.7398,
    90.6129,
    91.486,
    91.6806,
    91.8752,
    92.0697,
    92.2643,
    92.4589,
    92.6535,
    92.8481,
    93.0426,
    93.2372,
    93.4318,
    92.7568,
    92.0819,
    91.4069,
    90.732,
    90.057,
    89.3821,
    88.7071,
    88.0322,
    87.3572,
    86.6823,
    88.5006,
    90.3188,
    92.1371,
    93.9554,
    95.7736,
    97.5919,
    99.4102,
    101.228,
    103.047,
    104.865,
    106.079,
    107.294,
    108.508,
    109.722,
    110.936,
    112.151,
    113.365,
    114.579,
    115.794,
    117.008,
    117.088,
    117.169,
    117.249,
    117.33,
    117.41,
    117.49,
    117.571,
    117.651,
    117.732,
    117.812,
    117.517,
    117.222,
    116.927,
    116.632,
    116.336,
    116.041,
    115.746,
    115.451,
    115.156,
    114.861,
    114.967,
    115.073,
    115.18,
    115.286,
    115.392,
    115.498,
    115.604,
    115.711,
    115.817,
    115.923,
    115.212,
    114.501,
    113.789,
    113.078,
    112.367,
    111.656,
    110.945,
    110.233,
    109.522,
    108.811,
    108.865,
    108.92,
    108.974,
    109.028,
    109.082,
    109.137,
    109.191,
    109.245,
    109.3,
    109.354,
    109.199,
    109.044,
    108.888,
    108.733,
    108.578,
    108.423,
    108.268,
    108.112,
    107.957,
    107.802,
    107.501,
    107.2,
    106.898,
    106.597,
    106.296,
    105.995,
    105.694,
    105.392,
    105.091,
    104.79,
    105.08,
    105.37,
    105.66,
    105.95,
    106.239,
    106.529,
    106.819,
    107.109,
    107.399,
    107.689,
    107.361,
    107.032,
    106.704,
    106.375,
    106.047,
    105.719,
    105.39,
    105.062,
    104.733,
    104.405,
    104.369,
    104.333,
    104.297,
    104.261,
    104.225,
    104.19,
    104.154,
    104.118,
    104.082,
    104.046,
    103.641,
    103.237,
    102.832,
    102.428,
    102.023,
    101.618,
    101.214,
    100.809,
    100.405,
    100,
    99.6334,
    99.2668,
    98.9003,
    98.5337,
    98.1671,
    97.8005,
    97.4339,
    97.0674,
    96.7008,
    96.3342,
    96.2796,
    96.225,
    96.1703,
    96.1157,
    96.0611,
    96.0065,
    95.9519,
    95.8972,
    95.8426,
    95.788,
    95.0778,
    94.3675,
    93.6573,
    92.947,
    92.2368,
    91.5266,
    90.8163,
    90.1061,
    89.3958,
    88.6856,
    88.8177,
    88.9497,
    89.0818,
    89.2138,
    89.3459,
    89.478,
    89.61,
    89.7421,
    89.8741,
    90.0062,
    89.9655,
    89.9248,
    89.8841,
    89.8434,
    89.8026,
    89.7619,
    89.7212,
    89.6805,
    89.6398,
    89.5991,
    89.4091,
    89.219,
    89.029,
    88.8389,
    88.6489,
    88.4589,
    88.2688,
    88.0788,
    87.8887,
    87.6987,
    87.2577,
    86.8167,
    86.3757,
    85.9347,
    85.4936,
    85.0526,
    84.6116,
    84.1706,
    83.7296,
    83.2886,
    83.3297,
    83.3707,
    83.4118,
    83.4528,
    83.4939,
    83.535,
    83.576,
    83.6171,
    83.6581,
    83.6992,
    83.332,
    82.9647,
    82.5975,
    82.2302,
    81.863,
    81.4958,
    81.1285,
    80.7613,
    80.394,
    80.0268,
    80.0456,
    80.0644,
    80.0831,
    80.1019,
    80.1207,
    80.1395,
    80.1583,
    80.177,
    80.1958,
    80.2146,
    80.4209,
    80.6272,
    80.8336,
    81.0399,
    81.2462,
    81.4525,
    81.6588,
    81.8652,
    82.0715,
    82.2778,
    81.8784,
    81.4791,
    81.0797,
    80.6804,
    80.281,
    79.8816,
    79.4823,
    79.0829,
    78.6836,
    78.2842,
    77.4279,
    76.5716,
    75.7153,
    74.859,
    74.0027,
    73.1465,
    72.2902,
    71.4339,
    70.5776,
    69.7213,
    69.9101,
    70.0989,
    70.2876,
    70.4764,
    70.6652,
    70.854,
    71.0428,
    71.2315,
    71.4203,
    71.6091,
    71.8831,
    72.1571,
    72.4311,
    72.7051,
    72.979,
    73.253,
    73.527,
    73.801,
    74.075,
    74.349,
    73.0745,
    71.8,
    70.5255,
    69.251,
    67.9765,
    66.702,
    65.4275,
    64.153,
    62.8785,
    61.604,
    62.4322,
    63.2603,
    64.0885,
    64.9166,
    65.7448,
    66.573,
    67.4011,
    68.2293,
    69.0574,
    69.8856,
    70.4057,
    70.9259,
    71.446,
    71.9662,
    72.4863,
    73.0064,
    73.5266,
    74.0467,
    74.5669,
    75.087,
    73.9376,
    72.7881,
    71.6387,
    70.4893,
    69.3398,
    68.1904,
    67.041,
    65.8916,
    64.7421,
    63.5927,
    61.8752,
    60.1578,
    58.4403,
    56.7229,
    55.0054,
    53.288,
    51.5705,
    49.8531,
    48.1356,
    46.4182,
    48.4569,
    50.4956,
    52.5344,
    54.5731,
    56.6118,
    58.6505,
    60.6892,
    62.728,
    64.7667,
    66.8054,
    66.4631,
    66.1209,
    65.7786,
    65.4364,
    65.0941,
    64.7518,
    64.4096,
    64.0673,
    63.7251,
    63.3828,
];
exports["default"] = spectrum;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
/**
 * Composite data type for an RGB color
 */
var RGB = (function () {
    function RGB(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b;
    }
    /**
     * Getter that scales the red component
     * to 0-255 range
     *
     * @return {number} scaled red
     */
    RGB.prototype.getRed = function () {
        return Math.round(this.r * 255);
    };
    /**
     * Getter that scales the green component
     * to 0-255 range
     *
     * @return {number} scaled green
     */
    RGB.prototype.getGreen = function () {
        return Math.round(this.g * 255);
    };
    /**
     * Getter that scales the blue component
     * to 0-255 range
     *
     * @return {number} scaled blue
     */
    RGB.prototype.getBlue = function () {
        return Math.round(this.b * 255);
    };
    return RGB;
}());
exports["default"] = RGB;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
    SpectrumToRGB
    Adrian Flannery
    https://github.com/finnor/SpectrumToRGB
    http://finnor.github.io/
*/
exports.__esModule = true;
var Spectrum_1 = __webpack_require__(1);
exports.Spectrum = Spectrum_1["default"];
var SpectrumToRGB_1 = __webpack_require__(2);
exports.Converter = SpectrumToRGB_1["default"];


/***/ })
/******/ ]);